{"abi":[{"type":"function","name":"addTokenIdToWallet","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"wallet","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createAndInitializeTicketProxy","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"protocol","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getTicketPricePaid","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"ticketId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTotalTicketsSold","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getWalletTokenIds","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"wallet","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"isTokenOwner","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"wallet","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"removeTokenIdFromWallet","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"wallet","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setTicketPricePaid","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"ticketId","type":"uint256","internalType":"uint256"},{"name":"price","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setTotalTicketsSold","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateTicketsSoldAndShowStatusAfterRefund","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"ticketId","type":"uint256","internalType":"uint256"},{"name":"refundAmount","type":"uint256","internalType":"uint256"},{"name":"paymentToken","type":"address","internalType":"address"},{"name":"ticketOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addTokenIdToWallet(bytes32,address,uint256)":"de44006f","createAndInitializeTicketProxy(bytes32,address)":"107f6802","getTicketPricePaid(bytes32,uint256)":"93d4e100","getTotalTicketsSold(bytes32)":"61041870","getWalletTokenIds(bytes32,address)":"5b9a1e09","isTokenOwner(bytes32,address,uint256)":"2fef62b7","removeTokenIdFromWallet(bytes32,address,uint256)":"e35b1ee8","setTicketPricePaid(bytes32,uint256,uint256)":"bd47dc5c","setTotalTicketsSold(bytes32,uint256)":"787d76b8","updateTicketsSoldAndShowStatusAfterRefund(bytes32,uint256,uint256,address,address)":"5f1229f9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addTokenIdToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"createAndInitializeTicketProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"getTicketPricePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"}],\"name\":\"getTotalTicketsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeTokenIdFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTicketPricePaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTotalTicketsSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ticketOwner\",\"type\":\"address\"}],\"name\":\"updateTicketsSoldAndShowStatusAfterRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the BoxOffice contract responsible for ticket-related functionalities.\",\"kind\":\"dev\",\"methods\":{\"addTokenIdToWallet(bytes32,address,uint256)\":{\"params\":{\"showId\":\"The unique identifier of the show.\",\"tokenId\":\"The unique identifier of the ticket being added to the wallet.\",\"wallet\":\"The wallet address to which the ticket ID will be added.\"}},\"createAndInitializeTicketProxy(bytes32,address)\":{\"params\":{\"protocol\":\"The address of the protocol for initializing the ticket proxy.\",\"showId\":\"The unique identifier of the show.\"}},\"getTicketPricePaid(bytes32,uint256)\":{\"params\":{\"showId\":\"The unique identifier of the show.\",\"ticketId\":\"The unique identifier of the ticket.\"},\"returns\":{\"_0\":\"The price paid for the specified ticket.\"}},\"getTotalTicketsSold(bytes32)\":{\"params\":{\"showId\":\"The unique identifier of the show.\"},\"returns\":{\"_0\":\"The total number of tickets sold.\"}},\"getWalletTokenIds(bytes32,address)\":{\"params\":{\"showId\":\"The unique identifier of the show.\",\"wallet\":\"The address of the wallet.\"},\"returns\":{\"_0\":\"An array of token IDs associated with the show for the specified wallet.\"}},\"isTokenOwner(bytes32,address,uint256)\":{\"params\":{\"showId\":\"The unique identifier of the show.\",\"tokenId\":\"The unique identifier of the ticket.\",\"wallet\":\"The address of the wallet to check.\"},\"returns\":{\"_0\":\"True if the tokenId exists in the wallet's list of tokens for the specified show, false otherwise.\"}},\"removeTokenIdFromWallet(bytes32,address,uint256)\":{\"params\":{\"showId\":\"The unique identifier of the show.\",\"tokenId\":\"The unique identifier of the ticket being removed from the wallet.\",\"wallet\":\"The wallet address from which the ticket ID will be removed.\"}},\"setTicketPricePaid(bytes32,uint256,uint256)\":{\"params\":{\"price\":\"The price to set for the ticket.\",\"showId\":\"The unique identifier of the show.\",\"ticketId\":\"The unique identifier of the ticket.\"}},\"setTotalTicketsSold(bytes32,uint256)\":{\"params\":{\"amount\":\"The total number of tickets to set.\",\"showId\":\"The unique identifier of the show.\"}},\"updateTicketsSoldAndShowStatusAfterRefund(bytes32,uint256,uint256,address,address)\":{\"params\":{\"paymentToken\":\"The payment token used for the refund.\",\"refundAmount\":\"The amount to be refunded.\",\"showId\":\"The unique identifier of the show.\",\"ticketId\":\"The ID of the ticket being refunded.\",\"ticketOwner\":\"The address of the ticket owner initiating the refund.\"}}},\"title\":\"IBoxOffice\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenIdToWallet(bytes32,address,uint256)\":{\"notice\":\"Adds a token ID to a user's wallet for a specific show, signifying ticket ownership.\"},\"createAndInitializeTicketProxy(bytes32,address)\":{\"notice\":\"Creates and initializes a ticket proxy for a given show.\"},\"getTicketPricePaid(bytes32,uint256)\":{\"notice\":\"Retrieves the price paid for a specific ticket of a show.\"},\"getTotalTicketsSold(bytes32)\":{\"notice\":\"Retrieves the total number of tickets sold for a given show.\"},\"getWalletTokenIds(bytes32,address)\":{\"notice\":\"Retrieves the token IDs associated with a specific show for a given wallet.\"},\"isTokenOwner(bytes32,address,uint256)\":{\"notice\":\"Checks if a given token ID exists in the wallet's list of token IDs for a specific show, signifying ticket ownership.\"},\"removeTokenIdFromWallet(bytes32,address,uint256)\":{\"notice\":\"Removes a token ID from a user's wallet for a specific show.\"},\"setTicketPricePaid(bytes32,uint256,uint256)\":{\"notice\":\"Sets the price paid for a specific ticket of a show.\"},\"setTotalTicketsSold(bytes32,uint256)\":{\"notice\":\"Sets the total number of tickets sold for a specific show.\"},\"updateTicketsSoldAndShowStatusAfterRefund(bytes32,uint256,uint256,address,address)\":{\"notice\":\"Updates the total tickets sold and potentially the show status after a ticket refund.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/show/IBoxOffice.sol\":\"IBoxOffice\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\"]},\"sources\":{\"src/show/IBoxOffice.sol\":{\"keccak256\":\"0xe1af9dcf90aa377c803beea19aece6a4157b4e823333293a072ef02b5ec48903\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c76978ec4ea19e262df65a5ebcee9df9b72fad0823708b12418fcff922e70f2a\",\"dweb:/ipfs/QmNTPEDQb9rRi7WBaAL4hBqP5KhwgaAf19WWGqhoGNkAZA\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"addTokenIdToWallet"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"protocol","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"createAndInitializeTicketProxy"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"uint256","name":"ticketId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getTicketPricePaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getTotalTicketsSold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"wallet","type":"address"}],"stateMutability":"view","type":"function","name":"getWalletTokenIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"isTokenOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"removeTokenIdFromWallet"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"uint256","name":"ticketId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setTicketPricePaid"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setTotalTicketsSold"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"uint256","name":"ticketId","type":"uint256"},{"internalType":"uint256","name":"refundAmount","type":"uint256"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"ticketOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateTicketsSoldAndShowStatusAfterRefund"}],"devdoc":{"kind":"dev","methods":{"addTokenIdToWallet(bytes32,address,uint256)":{"params":{"showId":"The unique identifier of the show.","tokenId":"The unique identifier of the ticket being added to the wallet.","wallet":"The wallet address to which the ticket ID will be added."}},"createAndInitializeTicketProxy(bytes32,address)":{"params":{"protocol":"The address of the protocol for initializing the ticket proxy.","showId":"The unique identifier of the show."}},"getTicketPricePaid(bytes32,uint256)":{"params":{"showId":"The unique identifier of the show.","ticketId":"The unique identifier of the ticket."},"returns":{"_0":"The price paid for the specified ticket."}},"getTotalTicketsSold(bytes32)":{"params":{"showId":"The unique identifier of the show."},"returns":{"_0":"The total number of tickets sold."}},"getWalletTokenIds(bytes32,address)":{"params":{"showId":"The unique identifier of the show.","wallet":"The address of the wallet."},"returns":{"_0":"An array of token IDs associated with the show for the specified wallet."}},"isTokenOwner(bytes32,address,uint256)":{"params":{"showId":"The unique identifier of the show.","tokenId":"The unique identifier of the ticket.","wallet":"The address of the wallet to check."},"returns":{"_0":"True if the tokenId exists in the wallet's list of tokens for the specified show, false otherwise."}},"removeTokenIdFromWallet(bytes32,address,uint256)":{"params":{"showId":"The unique identifier of the show.","tokenId":"The unique identifier of the ticket being removed from the wallet.","wallet":"The wallet address from which the ticket ID will be removed."}},"setTicketPricePaid(bytes32,uint256,uint256)":{"params":{"price":"The price to set for the ticket.","showId":"The unique identifier of the show.","ticketId":"The unique identifier of the ticket."}},"setTotalTicketsSold(bytes32,uint256)":{"params":{"amount":"The total number of tickets to set.","showId":"The unique identifier of the show."}},"updateTicketsSoldAndShowStatusAfterRefund(bytes32,uint256,uint256,address,address)":{"params":{"paymentToken":"The payment token used for the refund.","refundAmount":"The amount to be refunded.","showId":"The unique identifier of the show.","ticketId":"The ID of the ticket being refunded.","ticketOwner":"The address of the ticket owner initiating the refund."}}},"version":1},"userdoc":{"kind":"user","methods":{"addTokenIdToWallet(bytes32,address,uint256)":{"notice":"Adds a token ID to a user's wallet for a specific show, signifying ticket ownership."},"createAndInitializeTicketProxy(bytes32,address)":{"notice":"Creates and initializes a ticket proxy for a given show."},"getTicketPricePaid(bytes32,uint256)":{"notice":"Retrieves the price paid for a specific ticket of a show."},"getTotalTicketsSold(bytes32)":{"notice":"Retrieves the total number of tickets sold for a given show."},"getWalletTokenIds(bytes32,address)":{"notice":"Retrieves the token IDs associated with a specific show for a given wallet."},"isTokenOwner(bytes32,address,uint256)":{"notice":"Checks if a given token ID exists in the wallet's list of token IDs for a specific show, signifying ticket ownership."},"removeTokenIdFromWallet(bytes32,address,uint256)":{"notice":"Removes a token ID from a user's wallet for a specific show."},"setTicketPricePaid(bytes32,uint256,uint256)":{"notice":"Sets the price paid for a specific ticket of a show."},"setTotalTicketsSold(bytes32,uint256)":{"notice":"Sets the total number of tickets sold for a specific show."},"updateTicketsSoldAndShowStatusAfterRefund(bytes32,uint256,uint256,address,address)":{"notice":"Updates the total tickets sold and potentially the show status after a ticket refund."}},"version":1}},"settings":{"remappings":["@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","openzeppelin/=lib/openzeppelin-contracts/contracts/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/show/IBoxOffice.sol":"IBoxOffice"},"evmVersion":"paris","libraries":{}},"sources":{"src/show/IBoxOffice.sol":{"keccak256":"0xe1af9dcf90aa377c803beea19aece6a4157b4e823333293a072ef02b5ec48903","urls":["bzz-raw://c76978ec4ea19e262df65a5ebcee9df9b72fad0823708b12418fcff922e70f2a","dweb:/ipfs/QmNTPEDQb9rRi7WBaAL4hBqP5KhwgaAf19WWGqhoGNkAZA"],"license":"MIT"}},"version":1},"id":85}