{"abi":[{"type":"function","name":"calculateTotalPayoutAmount","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"paymentToken","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"clearVault","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"paymentToken","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"depositToVault","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"depositToVaultERC20","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"paymentToken","type":"address","internalType":"address"},{"name":"tokenRecipient","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"distributeShares","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"recipients","type":"address[]","internalType":"address[]"},{"name":"splits","type":"uint256[]","internalType":"uint256[]"},{"name":"totalAmount","type":"uint256","internalType":"uint256"},{"name":"paymentToken","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getShowPaymentToken","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"payout","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"paymentToken","type":"address","internalType":"address"},{"name":"payee","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"processRefund","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"refundAmount","type":"uint256","internalType":"uint256"},{"name":"paymentToken","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setContractAddresses","inputs":[{"name":"boxOfficeAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDAOTreasuryAddress","inputs":[{"name":"_theGarden","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setShowPaymentToken","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"token","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawRefund","inputs":[{"name":"showId","type":"bytes32","internalType":"bytes32"},{"name":"paymentToken","type":"address","internalType":"address"},{"name":"payee","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"DAOTreasuryAddressUpdated","inputs":[{"name":"newAddress","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Withdrawal","inputs":[{"name":"showId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"paymentToken","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"calculateTotalPayoutAmount(bytes32,address)":"213efcab","clearVault(bytes32,address)":"fab49c37","depositToVault(bytes32)":"85266635","depositToVaultERC20(bytes32,uint256,address,address)":"5412233f","distributeShares(bytes32,address[],uint256[],uint256,address)":"2cc26d94","getShowPaymentToken(bytes32)":"d23b85a3","payout(bytes32,address,address)":"7674a691","processRefund(bytes32,uint256,address,address)":"ca6644d8","setContractAddresses(address)":"1f88bb87","setDAOTreasuryAddress(address)":"3af704bd","setShowPaymentToken(bytes32,address)":"e8aa2e5f","withdrawRefund(bytes32,address,address)":"1af4b9eb"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DAOTreasuryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"calculateTotalPayoutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"clearVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"}],\"name\":\"depositToVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenRecipient\",\"type\":\"address\"}],\"name\":\"depositToVaultERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"splits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"}],\"name\":\"getShowPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"processRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"boxOfficeAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_theGarden\",\"type\":\"address\"}],\"name\":\"setDAOTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setShowPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"showId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DAOTreasuryAddressUpdated(address)\":{\"params\":{\"newAddress\":\"The new address of the DAO treasury.\"}},\"Withdrawal(bytes32,address,uint256,address)\":{\"params\":{\"amount\":\"The amount of funds withdrawn.\",\"recipient\":\"The address of the recipient who received the funds.\",\"showId\":\"The unique identifier of the show.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateTotalPayoutAmount(bytes32,address)\":{\"params\":{\"paymentToken\":\"Contract address of the ERC20 token, or address(0) for Ether.\",\"showId\":\"Unique identifier of the show.\"},\"returns\":{\"_0\":\"The total amount available for payout.\"}},\"clearVault(bytes32,address)\":{\"params\":{\"paymentToken\":\"Contract address of the ERC20 token, or address(0) for Ether.\",\"showId\":\"Unique identifier of the show for which to clear the vault.\"}},\"depositToVault(bytes32)\":{\"params\":{\"showId\":\"Unique identifier of the show to receive the deposit.\"}},\"depositToVaultERC20(bytes32,uint256,address,address)\":{\"params\":{\"amount\":\"Amount of ERC20 tokens to deposit.\",\"paymentToken\":\"Contract address of the ERC20 token.\",\"showId\":\"Unique identifier of the show to receive the deposit.\",\"tokenRecipient\":\"Address which provides the tokens.\"}},\"distributeShares(bytes32,address[],uint256[],uint256,address)\":{\"params\":{\"paymentToken\":\"Contract address of the ERC20 token, or address(0) for Ether.\",\"recipients\":\"Array of addresses representing the recipients of the funds.\",\"showId\":\"Unique identifier of the show.\",\"splits\":\"Array of percentages detailing how the total amount is to be split among recipients.\",\"totalAmount\":\"Total amount to be distributed.\"}},\"getShowPaymentToken(bytes32)\":{\"params\":{\"showId\":\"The unique identifier of the show\"},\"returns\":{\"_0\":\"The payment token address\"}},\"payout(bytes32,address,address)\":{\"params\":{\"payee\":\"Recipient wallet address\",\"paymentToken\":\"Contract address of the ERC20 token, or address(0) for Ether.\",\"showId\":\"Unique identifier of the show.\"}},\"processRefund(bytes32,uint256,address,address)\":{\"params\":{\"paymentToken\":\"Contract address of the ERC20 token, or address(0) for Ether.\",\"recipient\":\"Address of the recipient receiving the refund.\",\"refundAmount\":\"Amount to be refunded.\",\"showId\":\"Unique identifier of the show.\"}},\"setDAOTreasuryAddress(address)\":{\"details\":\"This function can only be called by the owner of the contract. It updates the treasury address used for DAO operations and allocations.\",\"params\":{\"_theGarden\":\"The new address for the DAO treasury.\"}},\"setShowPaymentToken(bytes32,address)\":{\"params\":{\"showId\":\"The unique identifier of the show\",\"token\":\"The payment token address\"}},\"withdrawRefund(bytes32,address,address)\":{\"params\":{\"payee\":\"Address of the payee.\",\"paymentToken\":\"Contract address of the ERC20 token, or address(0) for Ether.\",\"showId\":\"Unique identifier of the show from which the refund will be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DAOTreasuryAddressUpdated(address)\":{\"notice\":\"Emitted when the DAO treasury address is updated.\"},\"Withdrawal(bytes32,address,uint256,address)\":{\"notice\":\"Emitted upon a successful Ether withdrawal from the show's funds.\"}},\"kind\":\"user\",\"methods\":{\"calculateTotalPayoutAmount(bytes32,address)\":{\"notice\":\"Calculates the total payout amount available for a show, distinguishing between ETH and ERC20 payments.\"},\"clearVault(bytes32,address)\":{\"notice\":\"Clears all stored value in the vault for a specific show.\"},\"depositToVault(bytes32)\":{\"notice\":\"Deposits Ether into the vault for a specific show.\"},\"depositToVaultERC20(bytes32,uint256,address,address)\":{\"notice\":\"Deposits specified ERC20 tokens into the vault for a specific show.\"},\"distributeShares(bytes32,address[],uint256[],uint256,address)\":{\"notice\":\"Distributes shares of the show's total amount among specified recipients.\"},\"getShowPaymentToken(bytes32)\":{\"notice\":\"Gets the payment token for a specific show\"},\"payout(bytes32,address,address)\":{\"notice\":\"Allows the organizer or artist to withdraw funds after a show has been completed.\"},\"processRefund(bytes32,uint256,address,address)\":{\"notice\":\"Processes a refund adjustment in the financial state of the show vault.\"},\"setDAOTreasuryAddress(address)\":{\"notice\":\"Sets the DAO treasury address to which funds can be allocated.\"},\"setShowPaymentToken(bytes32,address)\":{\"notice\":\"Sets the payment token for a specific show\"},\"withdrawRefund(bytes32,address,address)\":{\"notice\":\"Allows a user to withdraw their refund for a show, in either Ether or an ERC20 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/show/IShowVault.sol\":\"IShowVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\"]},\"sources\":{\"src/show/IShowVault.sol\":{\"keccak256\":\"0x09387a3f7296bc4d5661fa331f928c4fe579c8f286b07f3d67401bb77cb6a8ce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://70082067841665b7ecda1f7140d376798ad2876b6f24ff33bd2b6b3985046d61\",\"dweb:/ipfs/QmZ4jDNNvCjEERtjEieABwy9RB8AeWaSCFWZJiy3Zde24s\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"newAddress","type":"address","indexed":true}],"type":"event","name":"DAOTreasuryAddressUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32","indexed":true},{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"address","name":"paymentToken","type":"address","indexed":false}],"type":"event","name":"Withdrawal","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"paymentToken","type":"address"}],"stateMutability":"view","type":"function","name":"calculateTotalPayoutAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"paymentToken","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"clearVault"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"depositToVault"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"tokenRecipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"depositToVaultERC20"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"splits","type":"uint256[]"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"address","name":"paymentToken","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"distributeShares"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getShowPaymentToken","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"payee","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"payout"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"uint256","name":"refundAmount","type":"uint256"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"processRefund"},{"inputs":[{"internalType":"address","name":"boxOfficeAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setContractAddresses"},{"inputs":[{"internalType":"address","name":"_theGarden","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setDAOTreasuryAddress"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setShowPaymentToken"},{"inputs":[{"internalType":"bytes32","name":"showId","type":"bytes32"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"payee","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"withdrawRefund"}],"devdoc":{"kind":"dev","methods":{"calculateTotalPayoutAmount(bytes32,address)":{"params":{"paymentToken":"Contract address of the ERC20 token, or address(0) for Ether.","showId":"Unique identifier of the show."},"returns":{"_0":"The total amount available for payout."}},"clearVault(bytes32,address)":{"params":{"paymentToken":"Contract address of the ERC20 token, or address(0) for Ether.","showId":"Unique identifier of the show for which to clear the vault."}},"depositToVault(bytes32)":{"params":{"showId":"Unique identifier of the show to receive the deposit."}},"depositToVaultERC20(bytes32,uint256,address,address)":{"params":{"amount":"Amount of ERC20 tokens to deposit.","paymentToken":"Contract address of the ERC20 token.","showId":"Unique identifier of the show to receive the deposit.","tokenRecipient":"Address which provides the tokens."}},"distributeShares(bytes32,address[],uint256[],uint256,address)":{"params":{"paymentToken":"Contract address of the ERC20 token, or address(0) for Ether.","recipients":"Array of addresses representing the recipients of the funds.","showId":"Unique identifier of the show.","splits":"Array of percentages detailing how the total amount is to be split among recipients.","totalAmount":"Total amount to be distributed."}},"getShowPaymentToken(bytes32)":{"params":{"showId":"The unique identifier of the show"},"returns":{"_0":"The payment token address"}},"payout(bytes32,address,address)":{"params":{"payee":"Recipient wallet address","paymentToken":"Contract address of the ERC20 token, or address(0) for Ether.","showId":"Unique identifier of the show."}},"processRefund(bytes32,uint256,address,address)":{"params":{"paymentToken":"Contract address of the ERC20 token, or address(0) for Ether.","recipient":"Address of the recipient receiving the refund.","refundAmount":"Amount to be refunded.","showId":"Unique identifier of the show."}},"setDAOTreasuryAddress(address)":{"details":"This function can only be called by the owner of the contract. It updates the treasury address used for DAO operations and allocations.","params":{"_theGarden":"The new address for the DAO treasury."}},"setShowPaymentToken(bytes32,address)":{"params":{"showId":"The unique identifier of the show","token":"The payment token address"}},"withdrawRefund(bytes32,address,address)":{"params":{"payee":"Address of the payee.","paymentToken":"Contract address of the ERC20 token, or address(0) for Ether.","showId":"Unique identifier of the show from which the refund will be withdrawn."}}},"version":1},"userdoc":{"kind":"user","methods":{"calculateTotalPayoutAmount(bytes32,address)":{"notice":"Calculates the total payout amount available for a show, distinguishing between ETH and ERC20 payments."},"clearVault(bytes32,address)":{"notice":"Clears all stored value in the vault for a specific show."},"depositToVault(bytes32)":{"notice":"Deposits Ether into the vault for a specific show."},"depositToVaultERC20(bytes32,uint256,address,address)":{"notice":"Deposits specified ERC20 tokens into the vault for a specific show."},"distributeShares(bytes32,address[],uint256[],uint256,address)":{"notice":"Distributes shares of the show's total amount among specified recipients."},"getShowPaymentToken(bytes32)":{"notice":"Gets the payment token for a specific show"},"payout(bytes32,address,address)":{"notice":"Allows the organizer or artist to withdraw funds after a show has been completed."},"processRefund(bytes32,uint256,address,address)":{"notice":"Processes a refund adjustment in the financial state of the show vault."},"setDAOTreasuryAddress(address)":{"notice":"Sets the DAO treasury address to which funds can be allocated."},"setShowPaymentToken(bytes32,address)":{"notice":"Sets the payment token for a specific show"},"withdrawRefund(bytes32,address,address)":{"notice":"Allows a user to withdraw their refund for a show, in either Ether or an ERC20 token."}},"version":1}},"settings":{"remappings":["@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","openzeppelin/=lib/openzeppelin-contracts/contracts/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/show/IShowVault.sol":"IShowVault"},"evmVersion":"paris","libraries":{}},"sources":{"src/show/IShowVault.sol":{"keccak256":"0x09387a3f7296bc4d5661fa331f928c4fe579c8f286b07f3d67401bb77cb6a8ce","urls":["bzz-raw://70082067841665b7ecda1f7140d376798ad2876b6f24ff33bd2b6b3985046d61","dweb:/ipfs/QmZ4jDNNvCjEERtjEieABwy9RB8AeWaSCFWZJiy3Zde24s"],"license":"MIT"}},"version":1},"id":87}